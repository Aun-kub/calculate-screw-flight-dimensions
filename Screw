%%writefile streamlit_screw_flight_app.py
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

def calculate_screw_flight_dimensions(outer_diameter, inner_diameter, pitch, material_thickness):
  """
  Calculates the flat pattern dimensions for a screw conveyor flight
  using the formulas R1=(L1*h)/(L1-L2)-t and R2=R1+h.

  Args:
    outer_diameter: The outer diameter of the screw flight.
    inner_diameter: The inner diameter of the screw flight.
    pitch: The axial distance between corresponding points on consecutive turns.
    material_thickness: The thickness of the material used for the flight.

  Returns:
    A dictionary containing the outer radius, inner radius, and sweep angle
    (in degrees) of the flat pattern.
  """
  # Implement basic validation for inputs
  if outer_diameter <= 0 or inner_diameter <= 0 or pitch <= 0:
      raise ValueError("Outer Diameter, Inner Diameter, and Pitch must be positive.")
  if inner_diameter >= outer_diameter:
      raise ValueError("Inner Diameter must be less than Outer Diameter.")
  if material_thickness < 0:
      raise ValueError("Material thickness cannot be negative.")


  # Calculate L1
  L1 = np.sqrt((np.pi * outer_diameter)**2 + pitch**2)

  # Calculate L2
  L2 = np.sqrt((np.pi * inner_diameter)**2 + pitch**2)

  # Calculate h
  h = (outer_diameter - inner_diameter) / 2

  # Calculate outer radius (R1)
  # Add a check for L1 == L2 to prevent division by zero
  if np.isclose(L1, L2): # Use np.isclose for floating point comparison
      raise ValueError("L1 and L2 are equal, which would result in division by zero. Check input values (Outer Diameter, Inner Diameter, and Pitch).")
  outer_radius_developed = (L1 * h) / (L1 - L2) - material_thickness

  # Calculate inner radius (R2)
  inner_radius_developed = outer_radius_developed - h

  # Implement basic validation for calculated results
  if outer_radius_developed <= 0:
      raise ValueError("Calculated outer developed radius is zero or negative. Check input values.")
  if inner_radius_developed <= 0:
     raise ValueError("Calculated inner developed radius is zero or negative. Check input values.")

  # Calculate sweep angle
  sweep_angle_rad = (L1 / outer_radius_developed)
  sweep_angle_deg = np.degrees(sweep_angle_rad)

  return {
      "outer_radius": outer_radius_developed,
      "inner_radius": inner_radius_developed,
      "sweep_angle_deg": sweep_angle_deg
  }

# Streamlit App
st.title("Screw Flight Flat Pattern Calculator")

st.sidebar.header("Input Dimensions (mm)")

outer_dia_mm = st.sidebar.number_input("Outer Diameter", min_value=1, value=450)
inner_dia_mm = st.sidebar.number_input("Inner Diameter", min_value=1, value=118)
pitch_val_mm = st.sidebar.number_input("Pitch", min_value=1, value=350)
material_t_mm = st.sidebar.number_input("Material Thickness", min_value=0, value=6)

# Convert millimeters to meters for the function
outer_dia = outer_dia_mm / 1000
inner_dia = inner_dia_mm / 1000
pitch_val = pitch_val_mm / 1000
material_t = material_t_mm / 1000

try:
    dimensions = calculate_screw_flight_dimensions(outer_dia, inner_dia, pitch_val, material_t)

    st.subheader("Calculated Dimensions:")
    st.write(f"Outer Radius (Developed): {dimensions['outer_radius']*1000:.2f} mm")
    st.write(f"Inner Radius (Developed): {dimensions['inner_radius']*1000:.2f} mm")
    st.write(f"Sweep Angle: {dimensions['sweep_angle_deg']:.2f} degrees")

    # Visualize the flat pattern
    theta = np.linspace(0, np.radians(dimensions['sweep_angle_deg']), 100)
    r_outer = dimensions['outer_radius'] * 1000 # Convert back to mm for plotting
    r_inner = dimensions['inner_radius'] * 1000 # Convert back to mm for plotting

    fig, ax = plt.subplots(figsize=(8, 8), subplot_kw={'projection': 'polar'})
    ax.plot(theta, np.full_like(theta, r_outer), label='Outer Radius')
    ax.plot(theta, np.full_like(theta, r_inner), label='Inner Radius')

    # Add dimension text directly on lines
    # Outer radius dimension
    ax.text(np.radians(0), r_outer, f'{r_outer:.2f} mm',
            bbox=dict(boxstyle='round,pad=0.3', fc='white', ec='black', lw=1),
            ha='left', va='center', rotation=0)

    # Inner radius dimension
    ax.text(np.radians(0), r_inner, f'{r_inner:.2f} mm',
            bbox=dict(boxstyle='round,pad=0.3', fc='white', ec='black', lw=1),
            ha='left', va='center', rotation=0)

    # Sweep angle dimension
    ax.text(np.radians(dimensions['sweep_angle_deg'] / 2), r_outer, f'{dimensions["sweep_angle_deg"]:.2f}Â°',
            bbox=dict(boxstyle='round,pad=0.3', fc='white', ec='blue', lw=1),
            ha='center', va='bottom')


    # Side edges
    ax.plot([0, 0], [r_inner, r_outer], color='red', linestyle='--', label='Side Edge')
    ax.plot([np.radians(dimensions['sweep_angle_deg']), np.radians(dimensions['sweep_angle_deg'])], [r_inner, r_outer], color='red', linestyle='--')


    ax.set_title('Screw Flight Flat Pattern (Dimensions in mm)')
    ax.legend()
    ax.grid true # Show the grid lines

    st.pyplot(fig)

except ValueError as e:
    st.error(f"Error calculating dimensions: {e}")
